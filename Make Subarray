/* There is a canvas with N total cells, and each cell can be painted white or black. Currently, the state of the board can be represented by a binary string S, where Si=1 if and only if the i-th call in the canvas is painted black, and Si=0 otherwise.

You want the black cells to form a contiguous subarray, i.e. if cell x and cell y are coloured black, then all cells z between the 2 must also be black. Note that if there are no black cells, this condition is satisfied.

You can only change the colour of a cell from white to black (but not the other way around). Find the minimum number of changes needed.

Input Format
The first line of input will contain a single integer T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains N - the number of cells.
The second line contains S - a binary string of size N.
Output Format
For each test case, output on a new line the minimum number of cells that need to be changed from white to black, such that the black cells form a contiguous subarray.

Constraints
1≤T≤100
1≤N≤100​
Si∈{0,1} */

import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner scan = new Scanner(System.in);
		int t = scan.nextInt();
		for(int i=0;i<t;i++){
		    int n = scan.nextInt();
		    int arr[] = new int[];
		    for(int j=0;j<n;j++){
		        arr[j] = scan.nextInt();
		    }
		    int count = 0;
		    for(int k=0;k<arr.length;k++){
		        if(arr[k]==1){
		            for(int l=k+1;l<arr.length;k++){
		                if(arr[l]==1){
		                    count = count + (l-k+1);
		                    }
		                }
		            }
		       }
		    }
		}

	}
}
