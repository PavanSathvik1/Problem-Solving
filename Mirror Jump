/* There are N points on the number line, labeled 1 to N from left to right.
Chef is initially standing at point K.

Chef's goal is to reach point N. To do this, he can perform the following types of moves:

Move one step left - that is, if he is currently at point X, he can move to point X−1.
Move one step right - that is, if he is currently at point X, he can move to point X+1.
Mirror his position about the segment [1,N].
This means, if he is currently at point X, he will instantly move to point N+1−X.
The three types of moves can each be performed however many times he likes, and in any order.
Chef's position must lie in [1,N] at all times.

Find the minimum number of moves needed for Chef to reach point N, starting at K.

Input Format
The first line of input will contain a single integer T, denoting the number of test cases.
The first and only line of input will contain two space-separated integers N and K.
Output Format
For each test case, output on a new line the minimum number of moves Chef needs to reach point N.

Constraints
1≤T≤210
1≤N≤20
1≤K≤N*/

import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner scan = new Scanner(System.in);
		int t= scan.nextInt();
		for(int i=0;i<t;i++){
		    int n = scan.nextInt();
		    int k = scan.nextInt();
		    int countn=0;
		    
		    if(k<n){
		       countn = n-k;
		    }
		    else if(k>n){
		        countn = k-n; 
		    }
		    
		    int countm = 1;
		    int mirror = n+1-k;
		    if(mirror>n){
		        countm+= mirror-n;
		    }else{
		        countm+= n-mirror;
		    }
		    
		    if(countm>countn){
		        System.out.println(countn);
		    }else{
		        System.out.println(countm);
		    }
		}

	}
}
